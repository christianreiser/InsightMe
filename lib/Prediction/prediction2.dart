import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:insightme/Prediction/regression_triangle_chart.dart';

import 'color_scale.dart';
import 'gantt.dart';
import 'gantt2.dart';

/// json_to_dart https://javiercbk.github.io/json_to_dart/
class PredictionAutogenerated {
  double? prediction;
  double? ci68;
  List<double>? ci95;
  List<double>? scaleBounds;
  double? targetMean;

  PredictionAutogenerated(
      {this.prediction,
        this.ci68,
        this.ci95,
        this.scaleBounds,
        this.targetMean});

  PredictionAutogenerated.fromJson(Map<String, dynamic> json) {
    prediction = json['prediction'];
    ci68 = json['ci68'];
    ci95 = json['ci95'].cast<double>();
    scaleBounds = json['scale_bounds'].cast<double>();
    targetMean = json['target_mean'];
  }
}

class PredictionRoute2 extends StatefulWidget {
  @override
  State<PredictionRoute2> createState() => _PredictionRoute2State();
}

class _PredictionRoute2State extends State<PredictionRoute2> {
  @override
  Widget build(BuildContext context) {
    /// read files
    Future<PredictionAutogenerated> _readPhonePredictionIOFiles() async {
      String data = await DefaultAssetBundle.of(context)
          .loadString("assets/tmp_phone_io/prediction.json");
      final jsonResult = jsonDecode(data); //latest Dart
      PredictionAutogenerated predictions =
      PredictionAutogenerated.fromJson(jsonResult);
      return predictions;
    }

    return Container(
      margin: const EdgeInsets.all(8),
      child: FutureBuilder(
          future: _readPhonePredictionIOFiles(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.done) {
              final PredictionAutogenerated? predictionIOData = snapshot.data as PredictionAutogenerated?;
              return FutureBuilder(
                future: readRegressionTriangleIOFiles(context),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    final List<List<dynamic>>? regressionTriangleIOData = snapshot.data as List<List<dynamic>>?;
                    return SingleChildScrollView(
                      child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Container(
                              margin: EdgeInsets.fromLTRB(0, 0, 0, 5),
                              // padding: const EdgeInsets.fromLTRB(1, 8, 8, 8),
                              child: Text(
                                'Mood prediction for today with prediction interval:',
                                style: TextStyle(
                                    fontSize: 15.5,
                                    fontWeight: FontWeight.w500),
                              ),
                            ),
                            BiDirectionalGanttChart2(
                                predictionIOData!.scaleBounds,
                                context,
                                regressionTriangleIOData),
                            SizedBox(height: 3),
                            predictionWidget(predictionIOData),
                            numericScale(predictionIOData.scaleBounds),
                            showGanttExplanation(context),
                          ]),
                    );
                  } else {
                    return CircularProgressIndicator();
                  }
                },
              );
            } else {
              return Container(
                child: CircularProgressIndicator(),
              );
            }
          }),
    );
  }
}
