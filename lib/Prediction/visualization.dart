import 'dart:convert';
import 'dart:ui';

import 'package:csv/csv.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:insightme/Core/widgets/dialogue.dart';

/// json_to_dart https://javiercbk.github.io/json_to_dart/
class PredictionAutogenerated {
  double prediction;
  double ci68;
  double ci95;
  List<double> scaleBounds;
  double targetMean;

  PredictionAutogenerated(
      {this.prediction,
      this.ci68,
      this.ci95,
      this.scaleBounds,
      this.targetMean});

  PredictionAutogenerated.fromJson(Map<String, dynamic> json) {
    prediction = json['prediction'];
    ci68 = json['ci68'];
    ci95 = json['ci95'];
    scaleBounds = json['scale_bounds'].cast<double>();
    targetMean = json['target_mean'];
    print(
        'prediction,ci68,ci95,scaleBounds,targetMean below:\n$prediction,$ci68,$ci95,$scaleBounds,$targetMean');
  }
}

class PredictionRoute extends StatefulWidget {
  @override
  State<PredictionRoute> createState() => _PredictionRouteState();
}

class _PredictionRouteState extends State<PredictionRoute> {
  @override
  Widget build(BuildContext context) {
    /// read files
    Future<PredictionAutogenerated> _readPhonePredictionIOFiles() async {
      String data = await DefaultAssetBundle.of(context)
          .loadString("assets/tmp_phone_io/prediction.json");
      final jsonResult = jsonDecode(data); //latest Dart
      PredictionAutogenerated predictions =
          PredictionAutogenerated.fromJson(jsonResult);
      return predictions;
    }

    Future<List<List<dynamic>>> _readPhoneFeatureDataIOFiles() async {
      final String data = await DefaultAssetBundle.of(context)
          .loadString("assets/tmp_phone_io/feature_data.csv");
      final List<List<dynamic>> featureDataListList =
          const CsvToListConverter().convert(data);
      return featureDataListList;
    }

    BoxDecoration _predictionBoxDecoration() {
      return BoxDecoration(
        border: Border.all(width: 1.5),
        borderRadius: BorderRadius.all(Radius.circular(1.0)),
        gradient: const LinearGradient(
          begin: Alignment.centerLeft,
          end: Alignment(0.8, 0.0),
          // 10% of the width, so there are ten blinds.
          colors: const <Color>[
            Colors.red,
            Colors.yellow,
            Colors.green
          ], // red to yellow
        ),
      );
    }

    Widget _scaledBar(start, end, scaleBounds, color, height, textBeforeBar) {
      final int startCorrected = ((start - scaleBounds[0]) * 100).toInt();

      final int endCorrected = ((end - scaleBounds[0]) * 100).toInt();
      return Row(children: [
        /// empty space
        Expanded(
            flex: (startCorrected),
            child: Container(
              alignment: Alignment.centerLeft,
              height: height,
              child: Row(
                children: [
                  SizedBox(width: 2),
                  Text(textBeforeBar),
                ],
              ),
            )),

        /// prediction
        Expanded(
            flex: (endCorrected - startCorrected),
            child: Container(
              height: height,
              color: color,
              child: color == Colors.green//Color(Colors.green)//const Color(0xFF9dbc95)
                  ? FittedBox(child: Icon(Icons.arrow_forward_sharp))
                  : color == Colors.red//const Color(0xFF855e78)
                      ? FittedBox(child: Icon(Icons.arrow_back_sharp))
                      : Container(),
            )),

        /// empty space
        Expanded(
          flex: ((scaleBounds[1] * 100).toInt() - 100 - endCorrected),
          child: Container(height: height),
        ),
      ]);
    }

    Widget _gradientColorScale(predictions) {
      return Stack(
        children: <Widget>[
          Image(image: AssetImage('assets/tmp_phone_io/tokyo_crop.png'),height: 30,),
          Container(
            height: 30.0,
            decoration: _predictionBoxDecoration(),
            child: FractionallySizedBox(
              widthFactor: 1,
              child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [
                _scaledBar(
                    predictions.prediction - 0.1,
                    predictions.prediction + 0.1,
                    predictions.scaleBounds,
                    Colors.black,
                    8.0,
                    ''),
                _scaledBar(
                  predictions.prediction - predictions.ci68,
                  predictions.prediction + predictions.ci68,
                  predictions.scaleBounds,
                  Colors.black,
                  6.0,
                  '',
                ),
                _scaledBar(
                  predictions.prediction - predictions.ci95,
                  predictions.prediction + predictions.ci95,
                  predictions.scaleBounds,
                  Colors.black,
                  3.0,
                  '',
                ),
              ]),
            ),
          ),
        ],
      );
    }

    Widget _biDirectionalGanttChart(scaleBounds) {
      return FutureBuilder(
        future: _readPhoneFeatureDataIOFiles(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            final List<List<dynamic>> featureEndStarts = snapshot.data;
            const double height = 16.0;

            List<Widget> _ganttChildren(featureEndStarts) {
              List<Widget> list = List();
              //i<5, pass your dynamic limit as per your requirment
              for (int i = 1; i < featureEndStarts.length; i++) {
                Color color = Colors.red;//const Color(0xFF855e78);
                if ((featureEndStarts[i][3]) == 'True') {
                  color = Colors.green;//const Color(0xFF9dbc95);
                }
                list.add(
                  _scaledBar(featureEndStarts[i][1], featureEndStarts[i][2],
                      scaleBounds, color, height, featureEndStarts[i][0]),
                ); //add any Widget in place of Text("Index $i")
              }
              return list; // all widget added now retrun the list here
            }

            return Column(
              children: _ganttChildren(featureEndStarts),
            );
          } else {
            return Container(
              child: CircularProgressIndicator(),
            );
          }
        },
      );
    }

    Widget _scaleTile(num number) {
      return Column(
        children: [
          Container(color: Colors.black, height: 5, width: 1),
          Text('$number')
        ],
      );
    }

    _numericScale(scaleBounds) {
      var text = new List<int>.generate(scaleBounds[1].floor().toInt(), (i) {
        return i + 1;
      });
      return Container(
        child: FractionallySizedBox(
          widthFactor: 1,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [for (var i in text) _scaleTile(i)],
          ),
        ),
      );
    }

    Widget _showExplanation() {
      return TextButton(
        style: TextButton.styleFrom(
            padding: EdgeInsets.fromLTRB(5, 0, 5, 0),
            tapTargetSize: MaterialTapTargetSize.shrinkWrap),
        /* info note for correlation coefficient */
        // to reduce height of correlation info button
        child: Icon(Icons.info, color: Colors.grey),
        onPressed: () {
          showAlertDialog(
              'Explaination',
              'The top blue bar shows your predicted mood\n'
                  'The other larger blue bars show its 68% and 95% confidence intervals.\n'
                  'The green and red bars show positive and negative contributions of the prediction.\n'
                  'One contribution consists of today\'s value multiplied by a coefficient obtained through multiple linear regression.',
              context);
        },
      );
    }

    return Container(
      margin: const EdgeInsets.all(8),
      child: FutureBuilder(
          future: _readPhonePredictionIOFiles(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.done) {
              print('snapshot.data: ${snapshot.data.prediction}');
              return SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      margin: EdgeInsets.fromLTRB(0, 0, 0, 5),
                      // padding: const EdgeInsets.fromLTRB(1, 8, 8, 8),
                      child: Text(
                        'Mood prediction for today with confidence interval:',
                        style: TextStyle(
                            fontSize: 15.5, fontWeight: FontWeight.w500),
                      ),
                    ),
                    _biDirectionalGanttChart(snapshot.data.scaleBounds),
                    SizedBox(height: 3),
                    _gradientColorScale(snapshot.data),
                    _numericScale(snapshot.data.scaleBounds),
                    _showExplanation(),
                  ],
                ),
              );
            } else {
              return Container(
                child: CircularProgressIndicator(),
              );
            }
          }),
    );
  }
}
