import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

/// json_to_dart https://javiercbk.github.io/json_to_dart/
class PredictionAutogenerated {
  double prediction;
  double ci68;
  double ci95;
  List<double> scaleBounds;

  PredictionAutogenerated(
      {this.prediction, this.ci68, this.ci95, this.scaleBounds});

  PredictionAutogenerated.fromJson(Map<String, dynamic> json) {
    prediction = json['prediction'];
    ci68 = json['ci68'];
    ci95 = json['ci95'];
    scaleBounds = json['scale_bounds'].cast<double>();
    print(
        'prediction,ci68,ci95,scaleBounds below:\n$prediction,$ci68,$ci95,$scaleBounds');
  }
}

class PredictionRoute extends StatefulWidget {
  @override
  State<PredictionRoute> createState() => _PredictionRouteState();
}

class _PredictionRouteState extends State<PredictionRoute> {
  @override
  Widget build(BuildContext context) {
    /// read files
    Future<PredictionAutogenerated> _readPhoneIOFiles() async {
      String data = await DefaultAssetBundle.of(context)
          .loadString("assets/tmp_phone_io/prediction.json");
      final jsonResult = jsonDecode(data); //latest Dart
      PredictionAutogenerated predictions =
          PredictionAutogenerated.fromJson(jsonResult);
      print('prediction:: ${predictions.prediction}');
      return predictions;
    }

    BoxDecoration _predictionBoxDecoration() {
      return BoxDecoration(
        border: Border.all(width: 1.5),
        borderRadius: BorderRadius.all(Radius.circular(1.0)),
        gradient: const LinearGradient(
          begin: Alignment.centerLeft,
          end: Alignment(0.8, 0.0),
          // 10% of the width, so there are ten blinds.
          colors: const <Color>[
            Colors.red,
            Colors.yellow,
            Colors.green
          ], // red to yellow
        ),
      );
    }

    Widget _scaledBar(start, end, scaleBounds, color, height, textBeforeBar) {
      final int startCorrected = ((start - scaleBounds[0]) * 10).toInt();
      print('$start $end $scaleBounds');

      final int endCorrected = ((end - scaleBounds[0]) * 10).toInt();
      print('$startCorrected $endCorrected $scaleBounds');
      return Row(children: [
        /// empty space
        Expanded(
            flex: (startCorrected),
            child: Container(
              alignment: Alignment.centerLeft,
              height: height,
              child: Row(
                children: [
                  SizedBox(width: 2),
                  Text(textBeforeBar),
                ],
              ),
            )),

        /// prediction
        Expanded(
            flex: (endCorrected - startCorrected),
            child: Container(
              height: height,
              color: color,
              child: color == Colors.green
                  ? FittedBox(child: Icon(Icons.arrow_forward_sharp))
                  : color == Colors.red
                      ? FittedBox(child: Icon(Icons.arrow_back_sharp))
                      : Container(),
            )),

        /// empty space
        Expanded(
          flex: ((scaleBounds[1] * 10).toInt() - 10 - endCorrected),
          child: Container(height: height),
        ),
      ]);
    }

    Container _gradientColorScale(predictions) {
      return Container(
        height: 30.0,
        decoration: _predictionBoxDecoration(),
        child: FractionallySizedBox(
          widthFactor: 1,
          child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [
            _scaledBar(
                predictions.prediction - 0.1,
                predictions.prediction + 0.1,
                predictions.scaleBounds,
                Colors.blue,
                8.0,
                ''),
            _scaledBar(
              predictions.prediction - predictions.ci68,
              predictions.prediction + predictions.ci68,
              predictions.scaleBounds,
              Colors.blue,
              6.0,
              '',
            ),
            _scaledBar(
              predictions.prediction - predictions.ci95,
              predictions.prediction + predictions.ci95,
              predictions.scaleBounds,
              Colors.blue,
              3.0,
              '',
            ),
          ]),
        ),
      );
    }

    Widget _biDirectionalGanttChart(scaleBounds) {
      return Column(children: [
        _scaledBar(5, 6.1, scaleBounds, Colors.green, 16.0, 'Mood yesterday'),
        _scaledBar(6.1, 6.8, scaleBounds, Colors.green, 16.0, 'Humidity'),
        _scaledBar(6.3, 6.8, scaleBounds, Colors.red, 16.0, 'Body weight'),
        _scaledBar(6.3, 6.7, scaleBounds, Colors.green, 16.0, 'Running'),
        _scaledBar(6.7, 7.1, scaleBounds, Colors.green, 16.0, 'Steps'),
        _scaledBar(7.0, 7.1, scaleBounds, Colors.red, 16.0, 'CO2 level'),
      ]);
    }

    Widget _scaleTile(num number) {
      return Column(
        children: [
          Container(color: Colors.black, height: 5, width: 1),
          Text('$number')
        ],
      );
    }

    _numericScale(scaleBounds) {
      var text = new List<int>.generate(scaleBounds[1].floor().toInt(), (i) {
        return i + 1;
      });
      return Container(
        child: FractionallySizedBox(
          widthFactor: 1,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [for (var i in text) _scaleTile(i)],
          ),
        ),
      );
    }

    return Scaffold(
      body: Container(
        margin: const EdgeInsets.all(8),
        child: FutureBuilder(
            future: _readPhoneIOFiles(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.done) {
                print('snapshot.data: ${snapshot.data.prediction}');
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                        // padding: const EdgeInsets.fromLTRB(1, 8, 8, 8),
                        child: Text(
                            'Mood prediction for today with confidence interval:')),
                    _biDirectionalGanttChart(snapshot.data.scaleBounds),
                    _gradientColorScale(snapshot.data),
                    _numericScale(snapshot.data.scaleBounds),
                  ],
                );
              } else {
                return Container(
                    child: CircularProgressIndicator(),
                );
              }
            }),
      ),
    );
  }
}
